
package com.example.it355pz.dao;

import com.example.it355pz.model.Role;
import com.example.it355pz.model.User;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.transaction.annotation.Transactional;



@Repository
public class UserDaoImpl implements UserDao {
    
    @PersistenceContext
    private EntityManager entityManager;
    
    //@Autowired
    //private SessionFactory sessionFactory;
    

    @Override
    public List<User> getUsers() {
        //Session session = sessionFactory.getCurrentSession();
        CriteriaBuilder cb = entityManager.getCriteriaBuilder();
        CriteriaQuery <User> cq = cb.createQuery(User.class);
        Root <User> root = cq.from(User.class);
        cq.select(root);
        Query query = entityManager.createQuery(cq);
        return query.getResultList();  
    }

    @Override
    //@Transactional
    public void saveUser(User u) {
        //Session currentSession = entityManager.unwrap(Session.class);
        //Session currentSession;
        //currentSession = sessionFactory.getCurrentSession();
        //currentSession.save(u);
        entityManager.persist(u);
        System.out.println("Gotovo cuvanje!");
    }

    @Override
    public User getUser(int id) {
        //Session currentSession = sessionFactory.getCurrentSession();
        User u = entityManager.find(User.class, id);
        return u;
    }

    @Override
    public User deleteUser(User u) {
        //Session session = sessionFactory.getCurrentSession();
        if(entityManager.contains(u)){
            entityManager.remove(u);
        }else{
            entityManager.remove(entityManager.merge(u));
        }
        
        return u;
    }
    
    @Override
    public User updateUser(User u) {
        entityManager.merge(u);
        return u;
    }

    @Override
    public User findUserByEmail(String email) {
        CriteriaBuilder cb = entityManager.getCriteriaBuilder();
        CriteriaQuery<User> cq = cb.createQuery(User.class);
        Root<User> root = cq.from(User.class);
        cq.select(root).where(cb.equal(root.get("email"), email));
        
        Query query = entityManager.createQuery(cq);
        query.setMaxResults(1);
        List<User> res = query.getResultList();
        
        if(res.size() > 0){
            return res.get(0);
        }else{
            return null;
        }
    }

    @Override
    public User findUserByUname(String uname) {
        CriteriaBuilder cb = entityManager.getCriteriaBuilder();
        CriteriaQuery<User> cq = cb.createQuery(User.class);
        Root<User> root = cq.from(User.class);
        cq.select(root).where(cb.equal(root.get("uname"), uname));
        
        Query query = entityManager.createQuery(cq);
        query.setMaxResults(1);
        List<User> res = query.getResultList();
        
        if(res.size() > 0){
            return res.get(0);
        }else{
            return null;
        }
    }
    
    
    
}
