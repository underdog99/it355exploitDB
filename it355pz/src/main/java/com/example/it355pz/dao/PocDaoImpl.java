
package com.example.it355pz.dao;

import com.example.it355pz.model.Poc;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import org.springframework.stereotype.Repository;



@Repository
public class PocDaoImpl implements PocDao {
    
    @PersistenceContext
    private EntityManager entityManager;
    
    
    @Override
    public List<Poc> getPocs() {
        CriteriaBuilder cb = entityManager.getCriteriaBuilder();
        CriteriaQuery <Poc> cq = cb.createQuery(Poc.class);
        Root <Poc> root = cq.from(Poc.class);
        cq.select(root);
        Query query = entityManager.createQuery(cq);
        return query.getResultList();
    }

    @Override
    public void savePoc(Poc p) {
        entityManager.persist(p);
        System.out.print("Gotovo cuvanje poca!");
    }

    @Override
    public Poc getPoc(int id) {
        Poc t = entityManager.find(Poc.class, id);
        return t;
    }

    @Override
    public Poc deletePoc(Poc p) {
        if(entityManager.contains(p)){
            entityManager.remove(p);
        }else{
            entityManager.remove(entityManager.merge(p));
        }
        
        return p;
    }

    @Override
    public Poc updatePoc(Poc p) {
        entityManager.merge(p);
        return p;
    }

    @Override
    public Poc findPocByName(String name) {
        CriteriaBuilder cb = entityManager.getCriteriaBuilder();
        CriteriaQuery<Poc> cq = cb.createQuery(Poc.class);
        Root<Poc> root = cq.from(Poc.class);
        cq.select(root).where(cb.equal(root.get("name"), name));
        
        Query query = entityManager.createQuery(cq);
        query.setMaxResults(1);
        List<Poc> res = query.getResultList();
        
        if(res.size() > 0){
            return res.get(0);
        }else{
            return null;
        }
    }
    
}
