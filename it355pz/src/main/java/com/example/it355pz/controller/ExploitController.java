
package com.example.it355pz.controller;

import com.example.it355pz.model.Exploit;
import com.example.it355pz.model.Poc;
import com.example.it355pz.model.ScriptExp;
import com.example.it355pz.model.User;
import com.example.it355pz.service.ExploitService;
import com.example.it355pz.service.PocService;
import com.example.it355pz.service.ScriptExpService;
import com.example.it355pz.service.UserService;
import com.example.it355pz.storage.FilePocUtil;
import com.example.it355pz.storage.FileScrExpUtil;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.time.LocalDateTime;
import java.util.List;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.util.StringUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;



@RestController
public class ExploitController {
    
    @Autowired
    private ExploitService es;
    
    @Autowired
    private ScriptExpService expS;
    
    @Autowired
    private PocService ps;
    
    @Autowired
    private UserService us;
    
    
    @GetMapping("/user/home/exploitRest")
    public List<Exploit> getExploitLista(){
        return es.getExploits();
    }
    
    @GetMapping("/user/home/exploitRest/{id}")
    public ResponseEntity getExp(@PathVariable("id") int id){
        Exploit e = es.getExploit(id);
        
        Exploit eView = new Exploit();
            eView.setId(e.getId());
            eView.setName(e.getName());
            eView.setDesc(e.getDesc());
            eView.setDate(e.getDate());
            eView.setPla(e.getPla());
            eView.setType(e.getType());
            eView.setScr(e.getScr());
            eView.setPoc(e.getPoc());
        
        if(e == null){
            return new ResponseEntity("Exploit ne postoj sa id: " + id, HttpStatus.NOT_FOUND);
        }
        
        
        return new ResponseEntity(eView, HttpStatus.OK);
    }
    
    @PostMapping("/user/home/exploitRest")
    public ResponseEntity addExp(@Valid Exploit e, @RequestParam("fileScr") MultipartFile file, @RequestParam("filePoc") MultipartFile file2, BindingResult br) throws IOException{
        if(br.hasErrors()){
            System.out.println("BR greska!");
            System.out.println(br.getAllErrors());
        }
        System.out.println("Unutar kontrolera za upis exploita");
        System.out.println("Pla: " + e.getPla().size());
        System.out.println("Datoteka: " + file.getName());
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        User u = us.findUserByUname(auth.getName());
        e.setUser(u);
        
        
        String fn = StringUtils.cleanPath(file.getOriginalFilename());
        String fn2 = StringUtils.cleanPath(file2.getOriginalFilename());
        
        System.out.println("saveFile i file random");
        String fileRand = new FileScrExpUtil().saveFile(fn, file);
        String fileRand2 = new FilePocUtil().saveFile(fn2, file2);
        
        System.out.println("Kriranje objekta");
        ScriptExp scr = new ScriptExp();
            scr.setName(fn);
            scr.setLink(fileRand + "-" + fn);
            scr.setExt(file.getContentType());
        
        Poc p = new Poc();
            p.setName(fn2);
            p.setLink(fileRand2 + "-" + fn2);
            p.setExt(file2.getContentType());
            
        System.out.println("Datoteka SCR: " + scr.getName());
        System.out.println("Datoteka POC: " + p.getName());
        expS.saveScriptExp(scr);
        ps.savePoc(p);
        
        e.setDate(LocalDateTime.now());
        e.setScr(expS.findScriptExpByName(scr.getName()));
        e.setPoc(ps.findPocByName(p.getName()));
        es.saveExploit(e);
        
        return new ResponseEntity("Uspesno dodat exploit!", HttpStatus.OK);
    }
    
    @PutMapping("/user/home/exploitRest/{id}")
    public ResponseEntity validExp(@PathVariable int id){
        System.out.println("validExp metoda!");
        
        Exploit eUpdate = es.getExploit(id);
        eUpdate.setValid(true);
        es.updateExploit(eUpdate);
        
        return new ResponseEntity("Exploit je validan!", HttpStatus.OK);
    }
    
    @DeleteMapping("/user/home/exploitRest/{id}")
    public ResponseEntity deleteExp(@PathVariable int id){
        es.deleteExploit(es.getExploit(id));
        return new ResponseEntity("Uspesno obrisan exploit!", HttpStatus.OK);
    }
    
    
}
