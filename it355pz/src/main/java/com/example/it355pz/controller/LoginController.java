
package com.example.it355pz.controller;

import com.example.it355pz.model.Exploit;
import com.example.it355pz.model.Platform;
import com.example.it355pz.model.Type;
import com.example.it355pz.model.User;
import com.example.it355pz.service.ExploitService;
import com.example.it355pz.service.PlatformService;
import com.example.it355pz.service.TypeService;
import com.example.it355pz.service.UserService;
import java.util.ArrayList;
import java.util.List;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;


@Controller
public class LoginController {
    
    @Autowired
    private UserService us;
    
    @Autowired
    private ExploitService es;
    
    @Autowired
    private PlatformService ps;
    
    @Autowired
    private TypeService ts;
    
    
    @RequestMapping(value={"/", "/login"}, method = RequestMethod.GET)
    public ModelAndView login(){
        ModelAndView mav = new ModelAndView();
        mav.setViewName("login");
        
        return mav;
    }
    
    @RequestMapping(value="/reg", method = RequestMethod.GET)
    public ModelAndView registration(){
        ModelAndView modelAndView = new ModelAndView();
        User user = new User();
        modelAndView.addObject("user", user);
        modelAndView.setViewName("reg");
        return modelAndView;
    }
    
    @RequestMapping(value = "/reg", method = RequestMethod.POST)
    public ModelAndView createNewUser(@Valid User u, BindingResult br){
        System.out.println("Metoda: createNewUser()");
        ModelAndView mav = new ModelAndView();
        
        
        User uNameExist = us.findUserByUname(u.getUname());
        User emailExist = us.findUserByEmail(u.getEmail());
        System.out.println("Pocetak operacije za upor.");
        
        
        if(emailExist != null){
            br.rejectValue("uname", "error.user", "Korisnik sa username-om vec postoj!");
        }
        
        if(emailExist != null){
            br.rejectValue("email", "error.user", "Korisnik sa email adresom vec postoj!");
        }
        
        if(br.hasErrors()){
            mav.setViewName("reg");
        }else{
            System.out.println("Pocetak operacije cuvanja");
            us.saveUser(u);
            mav.addObject("uspesno", "Korisnik je kreiran!");
            mav.addObject("user", new User());
            mav.setViewName("reg");
        }
        
        return mav;
    }
    
    @RequestMapping(value="/user/home", method = RequestMethod.GET)
    public ModelAndView home(){
        System.out.println("Metoda: home()");
        ModelAndView mav = new ModelAndView();
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        User u = us.findUserByUname(auth.getName());
        
        System.out.println("User: " + u.getEmail());
        
        List<Exploit> expList = es.findExploitByUsername(u);
        
        List<Platform> p = ps.getPlatforms();
        List<Type> t = ts.getTypes();
        
        Exploit exp = new Exploit();
            //exp.addPla(new Platform());
        
        mav.addObject("uname", "Dobrodosao " + u.getUname());
        mav.addObject("expLista", expList);
        mav.addObject("plas", p);
        mav.addObject("types", t);
        mav.addObject("exp", exp);
        //mav.addObject("userMessage","Sadrzaj za korisnika");
        mav.setViewName("user/home");
        
        return mav;
    }
    
}
