
package com.example.it355pz.controller;

import com.example.it355pz.model.User;
import com.example.it355pz.service.UserService;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;



@RestController
public class UserUpdateController {
    
    @Autowired
    private UserService us;
    
    @Autowired
    private BCryptPasswordEncoder bCryptPasswordEncoder;
    
    
    @PutMapping("/user/profil/profilRest/uname/{id}")
    public ResponseEntity updateProfilUname(@PathVariable int id, User u) throws MalformedURLException, URISyntaxException{
        System.out.println("updateProfilUname metoda!");
        //User userUpdate = new User();
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        User user = us.findUserByUname(auth.getName());
        System.out.println("User: " + user.getUname());
        System.out.println("User: " + u.getUname());
        
        if(u.getUname() != user.getUname() && u.getUname().length() > 1){
            System.out.println("usernaem IF!");
            user.setUname(u.getUname());
            us.updateUser(user);
            URL url = new URL("http://localhost:8080/logout");
            
            return ResponseEntity.status(HttpStatus.FOUND).location(url.toURI()).build();
        }else{
            System.out.println("Nema azuriranja!");
            return new ResponseEntity("Greska", HttpStatus.NOT_FOUND);
        }

    }
    
    @PutMapping("/user/profil/profilRest/pass/{id}")
    public ResponseEntity updateProfilPass(@PathVariable int id, User u) throws MalformedURLException, URISyntaxException{
        System.out.println("updateProfilPass metoda!");
        //User userUpdate = new User();
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        User user = us.findUserByUname(auth.getName());
        
        if(u.getPass().length() > 8){
            System.out.println("password IF!");
            user.setPass(bCryptPasswordEncoder.encode(u.getPass()));
            us.updateUser(user);
            URL url = new URL("http://localhost:8080/logout");
            
            return ResponseEntity.status(HttpStatus.FOUND).location(url.toURI()).build();
        }else{
            System.out.println("Nema azuriranja!");
            return new ResponseEntity("Greska", HttpStatus.NOT_FOUND);
        }
        
        //return new ResponseEntity("localhost:8080/logout", HttpStatus.FOUND);
    }
    
    @DeleteMapping("/user/profil/profilRest/{id}")
    public ResponseEntity deleteProfil(@PathVariable int id) throws MalformedURLException, URISyntaxException{
        User u = us.getUser(id);
        us.deleteUser(u);
        URL url = new URL("http://localhost:8080/logout");
            
        return ResponseEntity.status(HttpStatus.FOUND).location(url.toURI()).build();
    }
    
}
